#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ1. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø–æ—Ç–æ–∫–∞–º–∏.

**–¶–µ–ª—å:** –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –∫–ª–∞—Å—Å–∞ System.Thread –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã .NET Framework.

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:** –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –í—ã —Å–º–æ–∂–µ—Ç–µ:
1. –ó–∞–ø—É—Å–∫–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
2. –ó–∞–≤–µ—Ä—à–∞—Ç—å –ø–æ—Ç–æ–∫.
3. –î–æ–∂–∏–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞. 


**–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è**.
1. [–û—Å–Ω–æ–≤—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞–º–∏](https://learn.microsoft.com/en-us/dotnet/standard/threading/managed-threading-basics)
2. [–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤](https://learn.microsoft.com/en-us/dotnet/standard/threading/using-threads-and-threading)
3. [–ü—Ä–∏–º–∏—Ç–∏–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–∞—Ä—å–µ—Ä](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier)
4. [Interlocked –æ–ø–µ—Ä–∞—Ü–∏–∏](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0)

## –ó–∞–¥–∞–Ω–∏–µ.
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ –º–µ—Ç–æ–¥–æ–º —Ç—Ä–∞–ø–µ—Ü–∏–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç–æ–∫–æ–≤.

–û—Ç—Ä–µ–∑–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Ç—Ä–µ–∑–∫–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ—Ç–æ–∫–æ–≤. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—Ä–µ–∑–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–µ 
–∏–Ω—Ç–µ–≥—Ä–∞–ª–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã—á–∏—Å–æ–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ä–µ–ª—å—Ç–∞—Ç—ã —Å—É–º–º–∏—Ä—É—Ç—Å—è.

**–£–∫–∞–∑–∞–Ω–∏–µ**.
1. –î–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–¥–æ–±–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–∞–∑–¥–µ–ª—è–µ–º–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –∫ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –ø—Ä–∏–±–∞–ª—è—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ —Å–∞–º–æ–º –ø–æ—Ç–æ–∫–µ. –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–ª–æ–∂–µ–Ω–∏—è –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤–æ—Å–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è [Interlocked –æ–ø–µ—Ä–∞—Ü–∏–µ–π](https://learn.microsoft.com/en-us/dotnet/api/system.threading.interlocked?view=net-8.0).
2. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–Ω–∞ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—á–∏—Å–ª—è—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–∞—Ö, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –î–ª—è —ç—Ç–æ–≥–æ —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ü—Ä–∏–º–∏—Ç–∏–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ë–∞—Ä—å–µ—Ä](https://learn.microsoft.com/ru-ru/dotnet/standard/threading/barrier).

#!csharp

#r "nuget: xunit, 2.8.1"
#r "nuget: ScottPlot, 4.1.29"

using System;
using System.Diagnostics;
using System.Threading;
using System.Linq;
using System.Collections.Generic;
using Xunit;
using ScottPlot;

class DefiniteIntegral 
{ 
    public static double SolveSingleThread(double a, double b, Func<double, double> function, double step) 
    { 
        double result = 0.0;
        for (double x = a; x < b; x += step)
        {
            result += (function(x) + function(x + step)) * step / 2;
        }
        return result; 
    } 

    public static double Solve(double a, double b, Func<double, double> function, double step, int threadsNumber) 
    { 
        long resultat = 0; 
        Barrier barrier = new Barrier(threadsNumber);     
        Thread[] threads = Enumerable.Range(0, threadsNumber).Select(index => 
        { 
            Thread thread = new Thread(() => 
            { 
                double tResultat = 0.0; 
                double start = a + index * ((b - a) / threadsNumber); 
                double end = start + ((b - a) / threadsNumber); 

                for (double i = start; i < end; i += step) 
                { 
                    tResultat += (function(i) + function(i + step)) * step * 0.5; 
                } 

                Interlocked.Add(ref resultat, (long)(tResultat * 1e5)); 
            }); 

            thread.Start(); 
            return thread; 
        }).ToArray(); 

        foreach (Thread thread in threads) 
        { 
            thread.Join(); 
        }

        return resultat / 1e5; 
    } 
}

#!csharp

(double result, double elapsedTime) MeasureTime(Func<double, double, Func<double, double>, double, double> func, double a, double b, Func<double, double> function, double step)
{
    var stopwatch = Stopwatch.StartNew();
    double result = func(a, b, function, step);
    stopwatch.Stop();
    return (result, stopwatch.Elapsed.TotalSeconds);
}

#!csharp

double[] steps = {1e-1, 1e-2, 1e-3, 1e-4, 1e-5, 1e-6};
double accuracy = 1e-4;
Func<double, double> function = Math.Sin;

double ostep = steps[0];

foreach (var step in steps)
{
    var (integral, PrTime) = Time(DefiniteIntegral.OneThread, -100.00, 100.00, function, step);
    Console.WriteLine($"–®–∞–≥ = {step} ‚ñ∂Ô∏è –∏–Ω—Ç–µ–≥—Ä–∞–ª = {integral} ‚ñ∂Ô∏è –≤—Ä–µ–º—è = {PrTime} —Å ‚ñ∂Ô∏è —Ç–æ—á–Ω–æ—Å—Ç—å = {Math.Abs(integral):F4}");
    
    if (Math.Abs(integral) <= accuracy)
    {
        ostep = step;
        Console.WriteLine($"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ ‚úÖ {ostep}");
        break;
    }
}

#!csharp

//–®–∞–≥ = 0.1 ‚ñ∂Ô∏è –∏–Ω—Ç–µ–≥—Ä–∞–ª = -0.04620566619422959 ‚ñ∂Ô∏è –≤—Ä–µ–º—è = 0.0001873 —Å ‚ñ∂Ô∏è —Ç–æ—á–Ω–æ—Å—Ç—å = 0.0462
//–®–∞–≥ = 0.01 ‚ñ∂Ô∏è –∏–Ω—Ç–µ–≥—Ä–∞–ª = -1.4438805186200998E-11 ‚ñ∂Ô∏è –≤—Ä–µ–º—è = 0.0008115 —Å ‚ñ∂Ô∏è —Ç–æ—á–Ω–æ—Å—Ç—å = 0.0000
//–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ ‚úÖ 0.01

#!csharp

int[] kolThreads = { 2, 3, 4, 5, 6, 7, 8, 9 };
var ManyThreadsTimes = new List<double>();
foreach (var num in kolThreads)
{
    var (_, PrTime) = Time((a, b, func, step) => DefiniteIntegral.ManyThreads(a, b, func, step, num), -100.00, 100.00, function, ostep);
    ManyThreadsTimes.Add(PrTime);
    Console.WriteLine($"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = {num} ‚ñ∂Ô∏è –≤—Ä–µ–º—è ‚è± = {PrTime} —Å–µ–∫—É–Ω–¥—ã");
}

#!csharp

//–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = 2 ‚ñ∂Ô∏è –≤—Ä–µ–º—è ‚è± = 0.0017451 —Å–µ–∫—É–Ω–¥—ã
//–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = 3 ‚ñ∂Ô∏è –≤—Ä–µ–º—è ‚è± = 0.0015642 —Å–µ–∫—É–Ω–¥—ã
//–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = 4 ‚ñ∂Ô∏è –≤—Ä–µ–º—è ‚è± = 0.0023266 —Å–µ–∫—É–Ω–¥—ã
//–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = 5 ‚ñ∂Ô∏è –≤—Ä–µ–º—è ‚è± = 0.0020825 —Å–µ–∫—É–Ω–¥—ã
//–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = 6 ‚ñ∂Ô∏è –≤—Ä–µ–º—è ‚è± = 0.0020893 —Å–µ–∫—É–Ω–¥—ã
//–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = 7 ‚ñ∂Ô∏è –≤—Ä–µ–º—è ‚è± = 0.0022255 —Å–µ–∫—É–Ω–¥—ã
//–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = 8 ‚ñ∂Ô∏è –≤—Ä–µ–º—è ‚è± = 0.0023206 —Å–µ–∫—É–Ω–¥—ã
//–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = 9 ‚ñ∂Ô∏è –≤—Ä–µ–º—è ‚è± = 0.0023607 —Å–µ–∫—É–Ω–¥—ã

#!csharp

var plot = new ScottPlot.Plot(700, 500);
plot.AddScatter(ManyThreadsTimes.ToArray(),kolThreads.Select(n => (double)n).ToArray());
plot.Title("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–æ–≤‚è±");
plot.XLabel("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö‚è±");
plot.YLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤");
plot.SaveFig("graf.png");

#!csharp

double oManyThreadTime = ManyThreadsTimes.Min();
int oThreads = kolThreads[ManyThreadsTimes.IndexOf(oManyThreadTime)];
var (singleThreadIntegral, OneThreadTime) = Time(DefiniteIntegral.OneThread, -100.00, 100.00, function, ostep);
Console.WriteLine($"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ  {OneThreadTime:F4} —Å–µ–∫—É–Ω–¥ ‚è±");
Console.WriteLine($"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å {oThreads} –ø–æ—Ç–æ–∫–∞–º–∏: {oManyThreadTime:F4} —Å–µ–∫—É–Ω–¥ ‚è±");
Console.WriteLine($"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {OneThreadTime/oManyThreadTime:F2}");
Console.WriteLine($"–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {(-(OneThreadTime - oManyThreadTime)) / OneThreadTime * 100:F2}%");

string itog = $@"
–ò—Ç–æ–≥:
üë£ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ = {ostep}
üîÅ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = {oThreads}
‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ = {OneThreadTime:F4} —Å–µ–∫—É–Ω–¥
‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å {oThreads} –ø–æ—Ç–æ–∫–∞–º–∏ = {oManyThreadTime:F4} —Å–µ–∫—É–Ω–¥
üíØ –£—Å–∫–æ—Ä–µ–Ω–∏–µ = {OneThreadTime / oManyThreadTime:F2}x
üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ = {(-(OneThreadTime - oManyThreadTime)) / OneThreadTime  * 100 :F2}%
";
Console.WriteLine(itog);

#!csharp

//–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ  0.0009 —Å–µ–∫—É–Ω–¥ ‚è±
//–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å 3 –ø–æ—Ç–æ–∫–∞–º–∏: 0.0016 —Å–µ–∫—É–Ω–¥ ‚è±
//–£—Å–∫–æ—Ä–µ–Ω–∏–µ: 0.60
//–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: 65.68%

//–ò—Ç–æ–≥:
//üë£ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ = 0.01
//üîÅ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ = 3
//‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ = 0.0009 —Å–µ–∫—É–Ω–¥
//‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å 3 –ø–æ—Ç–æ–∫–∞–º–∏ = 0.0016 —Å–µ–∫—É–Ω–¥
//üíØ –£—Å–∫–æ—Ä–µ–Ω–∏–µ = 0.60x
//üìà –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ = 65.68%
