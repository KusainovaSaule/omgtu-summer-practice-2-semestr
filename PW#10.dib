#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ10. –î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –ö–æ–º–∞–Ω–¥—ã.

**–¶–µ–ª—å:** –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:** –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –í—ã —Å–º–æ–∂–µ—Ç–µ:
1. –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.

## –ó–∞–¥–∞–Ω–∏–µ.
–ü–æ—Å–∫–æ–ª—å–∫—É –¥–ª–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏, —Ç–æ –º–æ–∂–µ—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å
–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤–ª–∏—è—é—â–µ–π –Ω–∞ —Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ—Å–∫–æ–ª—å–∫—É –ö–æ–º–∞–Ω–¥—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö,
—Ç–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –Ω–∞–¥–æ –ø–æ—Ç–æ–∫–æ-–±–µ–∑–æ–ø–∞—Å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º. –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑—É—è –∏–¥–∏–æ–º—É –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å-–ü–æ—Ä–µ–±–∏—Ç–µ–ª—å, –≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ - –æ—á–µ—Ä–µ–¥—å.

–ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –¥–ª—è –ö–æ–º–∞–Ω–¥—ã –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è 
–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—á–µ—Å—Ç—å, —á—Ç–æ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ, —á–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏, –∞ –∑–Ω–∞—á–∏—Ç –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å
—É –∫–∞–∂–¥–æ–π –î–ª–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏ —ç—Ç–æ–º –ø–æ—Ç–æ–∫–æ-–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–µ–±—É—é—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤, –∞ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
–æ–¥–Ω–æ–≤—Ä–µ–º–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ö–æ–º–∞–Ω–¥, –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ-–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏. 

–í–æ–∑–º–æ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ - –æ—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω—É –ø–æ—Ç–æ–∫–æ-–±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ—Ç–æ–∫–∞, –∞ –¥–ª—è –ö–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —Ä–µ—à–∏—Ç—å, –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
–∏–∑–ª–µ—á–µ–Ω–Ω–æ–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ—Ç–æ–∫–∞ –ø–æ–ø–∞–¥–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å –ö–æ–º–∞–Ω–¥—ã. –û–¥–∏–Ω –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
1. –ö–∞–∂–¥–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.
2. –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ö–æ–º–∞–Ω–ª–¥—ã, –∫–æ—Ç–æ—Ä–æ–º—É –æ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–æ.
3. –î–ª—è –ø–æ—Ç–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –î–ª–∏—Ç–µ–ª—å–Ω—É—é –ö–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∑–≤–∞–µ—Ç—Å—è –†–æ—É—Ç–µ—Ä–æ–º. –û–Ω —Ö—Ä–∞–Ω–∏—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–∞—Ä (id –ö–æ–º–∞–Ω–¥—ã, —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ—á–µ—Ä–µ–¥—å –ö–æ–º–∞–Ω–¥—ã). –ü—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ Execute —ç—Ç–æ–π 
–†–æ—É—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø–æ—Ç–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á—Ç–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ id –ö–æ–º–∞–Ω–¥—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –æ—á–µ—Ä–µ–¥—å, –∫—É–¥–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è.
–ï—Å–ª–∏ id –ö–æ–º–∞–Ω–¥—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–∞ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–º—É –∞–¥—Ä–µ—Å–∞—Ç—É.
–ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–π –ö–æ–º–∞–Ω–¥—ã, –µ–µ –æ—á–µ—Ä–µ–¥—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –†–æ—É—Ç–µ—Ä–∞. –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ö–æ–º–∞–Ω–¥—ã - –æ—á–µ—Ä–µ–¥—å —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –†–æ—É—Ç–µ—Ä–∞.

–ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –†–æ—É—Ç–µ—Ä–∞ –Ω–∞ –¥–≤—É—Ö –î–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ö–æ–º–∞–Ω–¥–∞—Ö –∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ö–æ–º–∞–Ω–¥–µ.

**–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è**.
1. [–ü–∞—Ç—Ç–µ—Ä–Ω –°–æ–æ–±—â–µ–Ω–∏–µ](https://www.enterpriseintegrationpatterns.com/patterns/messaging/Message.html)
2. [–ü–∞—Ç—Ç–µ—Ä–Ω –†–æ—É—Ç–µ—Ä - –≤–µ—Å—å —Ä–∞–∑–¥–µ–ª –ø—Ä–æ –†–æ—É—Ç–µ—Ä—ã](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageRoutingIntro.html)
3. [–û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏–º–∏](https://www.enterpriseintegrationpatterns.com/patterns/messaging/MessageConstructionIntro.html)

#!csharp

using System; 
using System.Collections.Concurrent; 
using System.Threading; 

public interface ICommand
{
    void Execute();
}

public interface IScheduler 
{ 
    bool HasCommand(); 
    ICommand Select(); 
    void Add(ICommand cmd); 
}

public interface IMessageHandler
{
    void HandleMessage(Message message);
}

public class RoundRobinScheduler : IScheduler 
{ 
    
    private readonly Queue<ICommand> scheduledCommanda = new Queue<ICommand>(); 
 
    public bool HasCommand() => scheduledCommanda.Count > 0; 
 
    public ICommand Select() 
    { 
        if (scheduledCommanda.Count == 0) { 
            throw new InvalidOperationException("‚ùå–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ "); 
        } 
        var cmd = scheduledCommanda.Dequeue(); 

        scheduledCommanda.Enqueue(cmd);  
        
        return cmd; 
    } 
 
    public void Add(ICommand cmd) => scheduledCommanda.Enqueue(cmd); 
}

public class Message
{
    public int CommandaId { get; }
    public string Dan { get; }

    public Message(int commandaId, string dan)
    {
        CommandaId = commandaId;
        Dan = dan;
    }
}

public class LongRunningCommand : ICommand, IMessageHandler
{
    private readonly int commandaId;
    private readonly Queue<Message> QueueMessage = new Queue<Message>();

    public LongRunningCommand(int commandaId)
    {
        this.commandaId = commandaId;
    }

    public void Execute()
    {
        while (QueueMessage.Count > 0)
        {
            var message = QueueMessage.Dequeue();
            Thread.Sleep(1000);
        }
    }

    public void HandleMessage(Message message)
    {
        Console.WriteLine($"–ö–æ–º–∞–Ω–¥–∞ ‚Ññ {commandaId} –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ üìß {message.Dan}");
        QueueMessage.Enqueue(message);
    }

    public int CommandaId => commandaId;
}

public class Router : ICommand
{
    private readonly ConcurrentQueue<Message> concurrentQueue = new ConcurrentQueue<Message>();
    private Dictionary<int, IMessageHandler> handlers = new Dictionary<int, IMessageHandler>();

    public void AddHandler(int commandaId, IMessageHandler handler) => handlers[commandaId] = handler;

    public void RemoveHandler(int commandaId) => handlers.Remove(commandaId);

    public void EnqueueMessage(Message message) => concurrentQueue.Enqueue(message);

    public void Execute()
    {
        while (concurrentQueue.TryDequeue(out var message))
        {
            if (handlers.TryGetValue(message.CommandaId, out var handler))
            {
                handler.HandleMessage(message);
            }
            else
            {
                Console.WriteLine($"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π ID –∫–æ–º–∞–Ω–¥—ã ‚Ññ {message.CommandaId}");
            }
        }
    }
}

public class HardStopCommanda : ICommand 
{ 
    private readonly ServerThread serverThread; 
 
    public HardStopCommanda(ServerThread serverThread) 
    { 
        this.serverThread = serverThread; 
    } 
 
    public void Execute() 
    { 
        if (Thread.CurrentThread == serverThread.GetThread()) 
        { 
            serverThread.HardStop(); 
        } 
        else 
        { 
            throw new InvalidOperationException("‚û°Ô∏è HardStopCommanda –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Ç–æ–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ "); 
        } 
    } 
}

public class SoftStopCommanda : ICommand 
{ 
    private readonly ServerThread serverThread; 
 
    public SoftStopCommanda(ServerThread serverThread) 
    { 
        this.serverThread = serverThread; 
    } 
 
    public void Execute() 
    { 
        if (Thread.CurrentThread == serverThread.GetThread()) 
        { 
            serverThread.RequestSoftStop(); 
        } 
        else 
        { 
            throw new InvalidOperationException("‚û°Ô∏è SoftStopCommanda –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –ø–æ—Ç–æ–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ "); 
        } 
    } 
}

public class ServerThread { 
    private Thread thread; 
    private IScheduler scheduler; 
    private ConcurrentQueue<ICommand> concurrentQueue; 
    private volatile bool isRunning; 
    private volatile bool SoftStopRequested; 
 
    private void Running(){ 
        while (isRunning) 
        { 
            if (concurrentQueue.TryDequeue(out ICommand commanda)) 
            { 
                scheduler.Add(commanda); 
            } 
 
            if (scheduler.HasCommand()) 
            { 
                try 
                { 
                    var sledCommand = scheduler.Select(); 
                    sledCommand.Execute(); 
                } 
                catch (Exception exception) 
                { 
                    Console.WriteLine($"‚ùóÔ∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ  {exception.Message}"); 
                } 
            } 
            else 
            { 
                Thread.Sleep(10); 
            } 
 
            if (SoftStopRequested && concurrentQueue.IsEmpty && (!scheduler.HasCommand())) 
            { 
                isRunning = false; 
            } 
        } 
    } 
 
    public ServerThread(IScheduler scheduler) 
    { 
        concurrentQueue = new ConcurrentQueue<ICommand>(); 
        this.scheduler = scheduler; 
        thread = new Thread(Running) {  
            IsBackground = true  
        }; 
        isRunning = true; 
    } 
 
    public void Start() {  
        thread.Start();  
    } 
 
    public void Stop() {  
        isRunning = false; thread.Join();  
    } 
 
    public void EnqueueCommand(ICommand commanda) 
    { 
        if (isRunning) {  
            concurrentQueue.Enqueue(commanda);  
        } 
    } 
 
    public void RequestSoftStop() {  
        SoftStopRequested = true;  
    } 
 
    public void HardStop() {  
        isRunning = false;  
    } 
 
    public bool IsRunning => isRunning; 
 
    public Thread GetThread() => thread; 
}

var roundrobinscheduler = new RoundRobinScheduler();
var serverThread = new ServerThread(roundrobinscheduler);
var router = new Router();

var commanda1 = new LongRunningCommand(1);
var commanda2 = new LongRunningCommand(2);

router.AddHandler(1, commanda1);
router.AddHandler(2, commanda2);

serverThread.EnqueueCommand(router);
serverThread.Start();

router.EnqueueMessage(new Message(1, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ‚Ññ 1"));
router.EnqueueMessage(new Message(2, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ‚Ññ 2"));
router.EnqueueMessage(new Message(3, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã"));

Thread.Sleep(10);

serverThread.Stop();

#!csharp

//–ö–æ–º–∞–Ω–¥–∞ ‚Ññ 1 –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ üìß –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ‚Ññ 1
//–ö–æ–º–∞–Ω–¥–∞ ‚Ññ 2 –ø–æ–ª—É—á–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ üìß –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ‚Ññ 2
//‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π ID –∫–æ–º–∞–Ω–¥—ã ‚Ññ 3
